/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.99
 * Generated at: 2025-05-12 12:09:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class settings_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

    if (session == null || session.getAttribute("username") == null) {
        response.sendRedirect("index.jsp");
        return;
    }
    String username = (String) session.getAttribute("username");
    String errorMessage = (String) session.getAttribute("errorMessage");
    String successMessage = (String) session.getAttribute("successMessage");
    session.removeAttribute("errorMessage");
    session.removeAttribute("successMessage");


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Settings | SecureAccess</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        .password-strength { height: 5px; margin-top: 5px; margin-bottom: 15px; }\r\n");
      out.write("        .weak { background-color: #dc3545; width: 25%; }\r\n");
      out.write("        .medium { background-color: #ffc107; width: 50%; }\r\n");
      out.write("        .strong { background-color: #28a745; width: 100%; }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-light p-5\">\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <div class=\"row justify-content-center\">\r\n");
      out.write("        <div class=\"col-md-8 col-lg-6\">\r\n");
      out.write("            <div class=\"card shadow-sm\">\r\n");
      out.write("                <div class=\"card-header bg-primary text-white\">\r\n");
      out.write("                    <h2 class=\"h5 mb-0\">Account Settings</h2>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"card-body\">\r\n");
      out.write("                    ");
 if (errorMessage != null) { 
      out.write("\r\n");
      out.write("                        <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n");
      out.write("                            ");
      out.print( errorMessage );
      out.write("\r\n");
      out.write("                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("                    ");
 if (successMessage != null) { 
      out.write("\r\n");
      out.write("                        <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n");
      out.write("                            ");
      out.print( successMessage );
      out.write("\r\n");
      out.write("                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    <form id=\"passwordForm\" method=\"POST\" action=\"");
      out.print( request.getContextPath() );
      out.write("/UpdatePasswordServlet\" novalidate>\r\n");
      out.write("                        <div class=\"mb-3\">\r\n");
      out.write("                            <label for=\"username\" class=\"form-label\">Username:</label>\r\n");
      out.write("                            <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" value=\"");
      out.print( username );
      out.write("\" readonly>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"mb-3\">\r\n");
      out.write("                            <label for=\"currentPassword\" class=\"form-label\">Current Password:</label>\r\n");
      out.write("                            <input type=\"password\" class=\"form-control\" id=\"currentPassword\" name=\"currentPassword\" required>\r\n");
      out.write("                            <div class=\"invalid-feedback\">Please enter your current password.</div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"mb-3\">\r\n");
      out.write("                            <label for=\"newPassword\" class=\"form-label\">New Password:</label>\r\n");
      out.write("                            <input type=\"password\" class=\"form-control\" id=\"newPassword\" name=\"newPassword\"\r\n");
      out.write("                                   pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\r\n");
      out.write("                                   title=\"Must contain at least one number, one uppercase and lowercase letter, and at least 8 or more characters\"\r\n");
      out.write("                                   required>\r\n");
      out.write("                            <div class=\"invalid-feedback\">Password must be at least 8 characters with uppercase, lowercase, and a number.</div>\r\n");
      out.write("                            <div class=\"password-strength weak\" id=\"passwordStrength\"></div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"mb-4\">\r\n");
      out.write("                            <label for=\"confirmPassword\" class=\"form-label\">Confirm New Password:</label>\r\n");
      out.write("                            <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" required>\r\n");
      out.write("                            <div class=\"invalid-feedback\">Passwords must match.</div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"d-grid gap-2 d-md-flex justify-content-md-end\">\r\n");
      out.write("                            <a href=\"welcome.jsp\" class=\"btn btn-outline-secondary me-md-2\">Cancel</a>\r\n");
      out.write("                            <button type=\"submit\" class=\"btn btn-primary\">Update Password</button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </form>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("    // Password strength bar\r\n");
      out.write("    document.getElementById('newPassword').addEventListener('input', function () {\r\n");
      out.write("        const val = this.value;\r\n");
      out.write("        const bar = document.getElementById('passwordStrength');\r\n");
      out.write("        let score = 0;\r\n");
      out.write("        if (val.length >= 8) score++;\r\n");
      out.write("        if (/[a-z]/.test(val)) score++;\r\n");
      out.write("        if (/[A-Z]/.test(val)) score++;\r\n");
      out.write("        if (/\\d/.test(val)) score++;\r\n");
      out.write("        if (/[^a-zA-Z0-9]/.test(val)) score++;\r\n");
      out.write("\r\n");
      out.write("        bar.className = 'password-strength';\r\n");
      out.write("        if (score <= 2) bar.classList.add('weak');\r\n");
      out.write("        else if (score <= 4) bar.classList.add('medium');\r\n");
      out.write("        else bar.classList.add('strong');\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // Client-side form validation\r\n");
      out.write("    document.getElementById('passwordForm').addEventListener('submit', function (e) {\r\n");
      out.write("        const newPwd = document.getElementById('newPassword');\r\n");
      out.write("        const confirmPwd = document.getElementById('confirmPassword');\r\n");
      out.write("        if (newPwd.value !== confirmPwd.value) {\r\n");
      out.write("            confirmPwd.setCustomValidity(\"Passwords must match\");\r\n");
      out.write("            confirmPwd.classList.add('is-invalid');\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("        } else {\r\n");
      out.write("            confirmPwd.setCustomValidity(\"\");\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        if (!this.checkValidity()) {\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("            e.stopPropagation();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        this.classList.add('was-validated');\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    document.getElementById('confirmPassword').addEventListener('input', function () {\r\n");
      out.write("        this.classList.remove('is-invalid');\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
